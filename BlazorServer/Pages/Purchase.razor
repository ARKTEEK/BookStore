@page "/purchase/{Id:int}"
@using System.Security.Claims
@using DataLibrary.Models
@using DataLibrary.Repositories
@inject NavigationManager Navigation
@inject CartRepository CartRepo
@inject UserRepository UserRepo
@inject CartItemRepository CartItemRepo


<AuthorizeView>

    <div class="small-container cart-page">
        <table>
            <thead>
            <tr>
                <th>Book</th>
                <th>Price</th>
                <th></th>
            </tr>
            </thead>

            @if (UserRepo.GetAll() != null) {
                List<CartItemModel> items = CartItemRepo.GetItemsByCartId(Id);

                TotalPrice = 0;

                foreach (CartItemModel ci in items) {
                    BookModel book = ci.BookModel;

                    <tr class="cart-entry">
                        <td>
                            <div class="cart-info">
                                <img src="@($"data:image/jped;base64,{book.Image}")"
                                     alt="Image not found..."
                                     class="product-img default">
                                <div>
                                    <p class="book-name" @onclick="x => NavItem(book.Id)">@book.Name</p>
                                    <p class="book-author">@(book.AuthorModel.Name) @(book.AuthorModel.Surname)</p>
                                    <a>
                                        <strong>@ci.BookTypeModel.Name</strong>
                                    </a>
                                    <br/>
                                </div>
                            </div>
                        </td>
                        <td>$@ci.Price.ToString("0.00")</td>
                        <td></td>
                    </tr>
                }
            }

        </table>
    </div>

</AuthorizeView>

@code {

    [Parameter]
    public int Id { get; set; }

    public ClaimsPrincipal AuthedUser { get; set; }
    public UserModel? User { get; set; }
    public double TotalPrice { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> AuthState { get; set; }

    protected override async Task OnInitializedAsync() {
        AuthenticationState authenticationState = await AuthState;
        AuthedUser = authenticationState.User;

        if (!AuthedUser.Identity.IsAuthenticated) {
            Navigation.NavigateTo("/login", true);
        }

        User = UserRepo.GetByEmail(AuthedUser.Identity.Name);
    }

    private void NavItem(int id) {
        Navigation.NavigateTo("/item/" + id);
    }

}